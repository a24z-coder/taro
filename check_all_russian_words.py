#!/usr/bin/env python3
import os
import json
import re

# –Ø–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
excluded_langs = {
    'app_ru.arb', 'app_ru_RU.arb',  # —Ä—É—Å—Å–∫–∏–π
    'app_uk.arb',                   # —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
    'app_bg.arb',                   # –±–æ–ª–≥–∞—Ä—Å–∫–∏–π
    'app_mk.arb', 'app_mk_MK.arb',  # –º–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π
    'app_sr.arb',                   # —Å–µ—Ä–±—Å–∫–∏–π
    'app_ky.arb', 'app_ky_KG.arb',  # –∫–∏—Ä–≥–∏–∑—Å–∫–∏–π
    'app_kk.arb',                   # –∫–∞–∑–∞—Ö—Å–∫–∏–π
    'app_mn.arb', 'app_mn_MN.arb',  # –º–æ–Ω–≥–æ–ª—å—Å–∫–∏–π
}

# –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö
russian_words = [
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç', '–û—Ç–≤–µ—Ç—å', '–æ—Ç–≤–µ—Ç—å', '—Ä–∞—Å–∫–ª–∞–¥', '–ö–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç—ã',
    '–ø—Ä–æ—à–ª–æ–µ', '–Ω–∞—Å—Ç–æ—è—â–µ–µ', '–±—É–¥—É—â–µ–µ', '–ø—Ä–∏—á–∏–Ω–∞', '–≤–æ–∑–º–æ–∂–Ω—ã–π', '–∏—Ç–æ–≥', '–û–±—ä—è—Å–Ω–∏', '–æ–±—ä—è—Å–Ω–∏',
    '–∑–Ω–∞—á–µ–Ω–∏–µ', '–∫–∞–∂–¥–æ–π', '–∫–∞—Ä—Ç—ã', '–æ–±—â–∏–π', '—Å–º—ã—Å–ª', '–¥–∞–Ω—ã', '–ø–æ—Ä—è–¥–∫—É', '–æ–ø—ã—Ç–Ω—ã–π', '—Ç–∞—Ä–æ–ª–æ–≥',
    '–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç—ã', '–∫–∞—Ä—Ç', '–∫–∞—Ä—Ç–æ–π', '–∫–∞—Ä—Ç–∞–º–∏', '–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç–µ', '–∫–∞—Ä—Ç–∞—Ö',
    '–≤–æ–ø—Ä–æ—Å', '–≤–æ–ø—Ä–æ—Å—ã', '–≤–æ–ø—Ä–æ—Å–∞', '–≤–æ–ø—Ä–æ—Å–æ–≤', '–≤–æ–ø—Ä–æ—Å—É', '–≤–æ–ø—Ä–æ—Å–∞–º', '–≤–æ–ø—Ä–æ—Å–æ–º', '–≤–æ–ø—Ä–æ—Å–∞–º–∏',
    '–æ—Ç–≤–µ—Ç', '–æ—Ç–≤–µ—Ç—ã', '–æ—Ç–≤–µ—Ç–∞', '–æ—Ç–≤–µ—Ç–æ–≤', '–æ—Ç–≤–µ—Ç—É', '–æ—Ç–≤–µ—Ç–∞–º', '–æ—Ç–≤–µ—Ç–æ–º', '–æ—Ç–≤–µ—Ç–∞–º–∏',
    '—Ç–∞—Ä–æ', '—Ç–∞—Ä–æ—Ç', '—Ç–∞—Ä–æ—Ç–∞', '—Ç–∞—Ä–æ—Ç—É', '—Ç–∞—Ä–æ—Ç–æ–º', '—Ç–∞—Ä–æ—Ç–µ', '—Ç–∞—Ä–æ—Ç–æ–º',
    '—Ä–∞—Å–∫–ª–∞–¥', '—Ä–∞—Å–∫–ª–∞–¥—ã', '—Ä–∞—Å–∫–ª–∞–¥–∞', '—Ä–∞—Å–∫–ª–∞–¥–æ–≤', '—Ä–∞—Å–∫–ª–∞–¥—É', '—Ä–∞—Å–∫–ª–∞–¥–∞–º', '—Ä–∞—Å–∫–ª–∞–¥–æ–º', '—Ä–∞—Å–∫–ª–∞–¥–∞–º–∏',
    '–ø—Ä–æ—à–ª–æ–µ', '–ø—Ä–æ—à–ª–æ–≥–æ', '–ø—Ä–æ—à–ª–æ–º—É', '–ø—Ä–æ—à–ª—ã–º', '–ø—Ä–æ—à–ª–æ–º', '–ø—Ä–æ—à–ª—ã–µ', '–ø—Ä–æ—à–ª—ã—Ö', '–ø—Ä–æ—à–ª—ã–º–∏',
    '–Ω–∞—Å—Ç–æ—è—â–µ–µ', '–Ω–∞—Å—Ç–æ—è—â–µ–≥–æ', '–Ω–∞—Å—Ç–æ—è—â–µ–º—É', '–Ω–∞—Å—Ç–æ—è—â–∏–º', '–Ω–∞—Å—Ç–æ—è—â–µ–º', '–Ω–∞—Å—Ç–æ—è—â–∏–µ', '–Ω–∞—Å—Ç–æ—è—â–∏—Ö', '–Ω–∞—Å—Ç–æ—è—â–∏–º–∏',
    '–±—É–¥—É—â–µ–µ', '–±—É–¥—É—â–µ–≥–æ', '–±—É–¥—É—â–µ–º—É', '–±—É–¥—É—â–∏–º', '–±—É–¥—É—â–µ–º', '–±—É–¥—É—â–∏–µ', '–±—É–¥—É—â–∏—Ö', '–±—É–¥—É—â–∏–º–∏',
    '–ø—Ä–∏—á–∏–Ω–∞', '–ø—Ä–∏—á–∏–Ω—ã', '–ø—Ä–∏—á–∏–Ω–µ', '–ø—Ä–∏—á–∏–Ω—É', '–ø—Ä–∏—á–∏–Ω–æ–π', '–ø—Ä–∏—á–∏–Ω–æ—é', '–ø—Ä–∏—á–∏–Ω', '–ø—Ä–∏—á–∏–Ω–∞–º', '–ø—Ä–∏—á–∏–Ω–∞–º–∏',
    '–≤–æ–∑–º–æ–∂–Ω—ã–π', '–≤–æ–∑–º–æ–∂–Ω–∞—è', '–≤–æ–∑–º–æ–∂–Ω–æ–µ', '–≤–æ–∑–º–æ–∂–Ω—ã–µ', '–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ', '–≤–æ–∑–º–æ–∂–Ω–æ–π', '–≤–æ–∑–º–æ–∂–Ω–æ–º—É', '–≤–æ–∑–º–æ–∂–Ω—ã–º',
    '–∏—Ç–æ–≥', '–∏—Ç–æ–≥–∏', '–∏—Ç–æ–≥–∞', '–∏—Ç–æ–≥–æ–≤', '–∏—Ç–æ–≥—É', '–∏—Ç–æ–≥–∞–º', '–∏—Ç–æ–≥–æ–º', '–∏—Ç–æ–≥–∞–º–∏',
    '–∑–Ω–∞—á–µ–Ω–∏–µ', '–∑–Ω–∞—á–µ–Ω–∏—è', '–∑–Ω–∞—á–µ–Ω–∏—é', '–∑–Ω–∞—á–µ–Ω–∏–µ–º', '–∑–Ω–∞—á–µ–Ω–∏–π', '–∑–Ω–∞—á–µ–Ω–∏—è–º', '–∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
    '–∫–∞–∂–¥—ã–π', '–∫–∞–∂–¥–∞—è', '–∫–∞–∂–¥–æ–µ', '–∫–∞–∂–¥—ã–µ', '–∫–∞–∂–¥–æ–≥–æ', '–∫–∞–∂–¥–æ–π', '–∫–∞–∂–¥–æ–º—É', '–∫–∞–∂–¥—ã–º', '–∫–∞–∂–¥–æ–º',
    '–æ–±—â–∏–π', '–æ–±—â–∞—è', '–æ–±—â–µ–µ', '–æ–±—â–∏–µ', '–æ–±—â–µ–≥–æ', '–æ–±—â–µ–π', '–æ–±—â–µ–º—É', '–æ–±—â–∏–º', '–æ–±—â–µ–º',
    '—Å–º—ã—Å–ª', '—Å–º—ã—Å–ª—ã', '—Å–º—ã—Å–ª–∞', '—Å–º—ã—Å–ª–æ–≤', '—Å–º—ã—Å–ª—É', '—Å–º—ã—Å–ª–∞–º', '—Å–º—ã—Å–ª–æ–º', '—Å–º—ã—Å–ª–∞–º–∏',
    '–¥–∞–Ω', '–¥–∞–Ω–∞', '–¥–∞–Ω–æ', '–¥–∞–Ω—ã', '–¥–∞–Ω–Ω–æ–≥–æ', '–¥–∞–Ω–Ω–æ–π', '–¥–∞–Ω–Ω–æ–º—É', '–¥–∞–Ω–Ω—ã–º', '–¥–∞–Ω–Ω–æ–º',
    '–ø–æ—Ä—è–¥–æ–∫', '–ø–æ—Ä—è–¥–∫–∏', '–ø–æ—Ä—è–¥–∫–∞', '–ø–æ—Ä—è–¥–∫–æ–≤', '–ø–æ—Ä—è–¥–∫—É', '–ø–æ—Ä—è–¥–∫–∞–º', '–ø–æ—Ä—è–¥–∫–æ–º', '–ø–æ—Ä—è–¥–∫–∞–º–∏',
    '–æ–ø—ã—Ç–Ω—ã–π', '–æ–ø—ã—Ç–Ω–∞—è', '–æ–ø—ã—Ç–Ω–æ–µ', '–æ–ø—ã—Ç–Ω—ã–µ', '–æ–ø—ã—Ç–Ω–æ–≥–æ', '–æ–ø—ã—Ç–Ω–æ–π', '–æ–ø—ã—Ç–Ω–æ–º—É', '–æ–ø—ã—Ç–Ω—ã–º', '–æ–ø—ã—Ç–Ω–æ–º',
    '—Ç–∞—Ä–æ–ª–æ–≥', '—Ç–∞—Ä–æ–ª–æ–≥–∏', '—Ç–∞—Ä–æ–ª–æ–≥–∞', '—Ç–∞—Ä–æ–ª–æ–≥–æ–≤', '—Ç–∞—Ä–æ–ª–æ–≥—É', '—Ç–∞—Ä–æ–ª–æ–≥–∞–º', '—Ç–∞—Ä–æ–ª–æ–≥–æ–º', '—Ç–∞—Ä–æ–ª–æ–≥–∞–º–∏'
]

l10n_dir = 'lib/l10n'

def check_file(filename):
    if filename in excluded_langs:
        return None
    
    path = os.path.join(l10n_dir, filename)
    if not os.path.exists(path):
        return None
        
    try:
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        found_issues = []
        
        for key, value in data.items():
            if isinstance(value, str):
                found_words = []
                for word in russian_words:
                    if word in value:
                        found_words.append(word)
                
                if found_words:
                    found_issues.append({
                        'key': key,
                        'words': found_words,
                        'value_preview': value[:100] + '...' if len(value) > 100 else value
                    })
        
        if found_issues:
            return found_issues
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}")
        return None

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö .arb —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞...")
    print("–ò—Å–∫–ª—é—á–∞–µ–º —è–∑—ã–∫–∏:", ', '.join(excluded_langs))
    print()
    
    found_issues = []
    
    for filename in os.listdir(l10n_dir):
        if filename.endswith('.arb') and not filename.startswith('app_localizations'):
            result = check_file(filename)
            if result:
                found_issues.append((filename, result))
                print(f"‚ö†Ô∏è  {filename}:")
                for issue in result:
                    print(f"   –ö–ª—é—á: {issue['key']}")
                    print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞: {', '.join(issue['words'])}")
                    print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {issue['value_preview']}")
                    print()
    
    if not found_issues:
        print("‚úÖ –†—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    else:
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len(found_issues)}")
        total_issues = sum(len(issues) for _, issues in found_issues)
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π: {total_issues}")
    
    print("‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 