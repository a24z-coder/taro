import os
import re
import json
import sys

l10n_dir = 'lib/l10n'
key = 'five_cards_screen_prompt'

# –†—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
russian_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π)
correct_prompt = """Analyze the following tarot card spread for {userName} who asks: "{userQuestion}"

Past: {pastCard}
Present: {presentCard}
Hidden: {hiddenCard}
Advice: {adviceCard}
Outcome: {outcomeCard}

Provide a detailed interpretation of this 5-card spread, explaining how each card relates to the question and how they work together to tell a complete story. Focus on practical insights and guidance."""

def has_russian_text(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    return bool(russian_pattern.search(text))

def get_files_with_russian_prompt():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ five_cards_screen_prompt"""
    files_with_russian = []
    
    for filename in os.listdir(l10n_dir):
        if not filename.endswith('.arb'):
            continue
            
        path = os.path.join(l10n_dir, filename)
        try:
            with open(path, encoding='utf-8') as f:
                data = json.load(f)
                
            if key in data and has_russian_text(data[key]):
                files_with_russian.append(filename)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
    
    return files_with_russian

def fix_prompt_in_files(files_to_fix):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    fixed_count = 0
    
    for filename in files_to_fix:
        path = os.path.join(l10n_dir, filename)
        try:
            with open(path, encoding='utf-8') as f:
                data = json.load(f)
            
            if key in data:
                old_prompt = data[key]
                data[key] = correct_prompt
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {filename}")
                print(f"   –ë—ã–ª–æ: {old_prompt[:100]}...")
                print(f"   –°—Ç–∞–ª–æ: {correct_prompt[:100]}...")
                print()
                fixed_count += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")
    
    return fixed_count

def main():
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ five_cards_screen_prompt...")
    
    files_with_russian = get_files_with_russian_prompt()
    
    if not files_with_russian:
        print("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ.")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files_with_russian)} —Ñ–∞–π–ª–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:")
    for i, filename in enumerate(files_with_russian, 1):
        print(f"   {i}. {filename}")
    
    total_files = len(files_with_russian)
    batch_size = 20
    
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ {batch_size} —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑...")
    
    for i in range(0, total_files, batch_size):
        batch = files_with_russian[i:i + batch_size]
        batch_num = i // batch_size + 1
        total_batches = (total_files + batch_size - 1) // batch_size
        
        print(f"\nüì¶ –ü–∞–∫–µ—Ç {batch_num}/{total_batches} ({len(batch)} —Ñ–∞–π–ª–æ–≤):")
        print("=" * 50)
        
        fixed = fix_prompt_in_files(batch)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {fixed} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ {batch_num}")
        
        if i + batch_size < total_files:
            response = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º? (y/n): ")
            if response.lower() != 'y':
                print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
    
    print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {min(i + batch_size, total_files)} –∏–∑ {total_files}")
    print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å 'flutter gen-l10n' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.")

if __name__ == "__main__":
    main() 